JavaScript cont'd
	callback functions
		functions that are passed into other functions as parameters
		these functions can then be called from within the other function using the parameter name
			- if i pass a function into a parameter that is named "funcName", then i can
			  call it by calling funcName();
		callback functions are often just defined as they're being passed in using arrow notation
			- if i defined the function before, i could do
				otherFunc(param, callbackFunc);
			- but i could use arrow notation instead
				otherFunc(param, () => { /* code i want */ });
			- this is similar to how lambdas work in Java
	template literals
		where a regular string literal would be in double quotes "string", template literals are in ``
		this allows us to specify a string in the exact format that we want it to be ultimately
		document.getElementById("idName").innerHTML = ``;
		benefits: we don't have to use newline characters (\n), we don't have to concatenate to add variables
			- with concatenation: element.innerHTML = "Hello, " + name + "!";
			- with template literal: element.innerHTML = `Hello, ${name}!`;
				element.innerHTML = `Your total is ${sum * tax}`;
	event propagation
		- the way that event listeners handle events for elements that have parents/children with event listeners
		- two types of event propagation
			- bubbling: default, the event "bubbles" up from the innermost child element to the outermost parent
			- capturing: the event starts at the outermost parent and moves down through to the innermost child element
		- we specify which type to use when adding event listeners
			- element.addEventListener("event", callbackFunc, true/false)
			- true is capturing, false is bubbling
			- when we set up our event listeners using the "on" method, it defaults to bubbling
				- element.onclick = callbackFunc;
		- we also can stop propagation by using event.stopPropagation() in the callback function for the event listener