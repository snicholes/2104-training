SQL
	- Structured Query Language
	- language that is used to query, modify, and define relational databases 
	- there are many different dialects of SQL (ex: Oracle SQL, PostgreSQL, mySQL, etc.) based
	  on each RDBMS (relational database management system)
	- we will be using Oracle SQL, one of the most common and reliable RDBMS for
	  enterprise environments
	- keys
		- primary key: a unique identifier of a row
		- candidate key: a subset of columns that could be a primary key
			- must be non-volatile information (isn't going to change)
			- must be non-sensitive information (no SSN, passwords, etc)
		- composite key: a primary key comprised of more than one column
		- natural key: a primary key that naturally arises from the data set (is naturally unique, not null, non-volatile, non-sensitive)
		- surrogate key: a primary key generated by/in the database whose only purpose is to be primary key: data is not otherwise meaningful
			- this is best practice in the vast majority of situations
	- foreign key: a subset of columns that reference the primary key of
	  another table
		- this is how we build up our relationships in a relational
		  database
		- example: a CAT table/relation for our CatApp would have
		  the following columns/fields: ID, NAME, AGE, BREED_ID,
		  STATUS_ID
			- BREED_ID and STATUS_ID are foreign keys to the
			  BREED table and the STATUS table
	- basic syntax
		- line comments start with --
		- block comments are surrounded with /* */
		- everything that is not in quotes is auto-capitalized
			- sELecT * fROm TabLE_NAME wheRE iD = 5; --this is valid
		- statements follow specific patterns based on the initial keyword,
		  basically like sentences including different "clauses"
SQL Sublanguages
	- sometimes these are debated as well - numbers vary from 3-5
	- if three: DDL, DML, DCL
	- if five: DDL, DML, DQL, DCL, TCL
	- DDL: data definition language
		- this is used to define tables, constraints, views, etc.
		- CREATE, ALTER, DROP, TRUNCATE
	- DML: data manipulation language
		- this is used to manipulate rows in tables
		- in the "three sublanguages" view, DQL is included here
		  so as to include all CRUD operations
		- INSERT, UPDATE, DELETE	
	- DQL: data query language
		- this is used to query the data
		- in the "five sublanguages" view, this is a separate
		  sublanguage because it can get very complex; there are many
		  things that can get involved in querying data
		- SELECT
	- DCL: data control language
		- this is used to manage permissions of database users
		- GRANT, REVOKE
	- TCL: transaction control language
		- in the "three sublanguages" view as well as sometimes in a
		  "four sublanguages" view, this is included with DML as well
		- this manages transactions, aka groups of DML statements
		  that are related to each other
		- ROLLBACK, COMMIT, SAVEPOINT, BEGIN
SQL
	- basic queries
		- SELECT (columns) FROM (table)
		- WHERE: sets a condition, such as WHERE id = 2;
		- ORDER BY: allows you to choose which column to sort the
		  result set by, such as ORDER BY name
	- data types to know (Oracle SQL):
		number(p) or (p,s) -- p = precision or number of digits. s = scale or decimal points
		varchar2(n) -- n is number of characters; this is variable length
		char(n) -- n is number of characters; this is fixed-length
		date
		timestamp
	- joins
		- joins are used to query data from multiple tables at the
		  same time.
		- types of joins:
			- inner join: only returns the rows that have a
			  match
			- left outer join: returns all rows from the left
			  table, with nulls in the right-side rows that
			  don't have matches.
			- right outer join: returns all rows from the right
			  table, with nulls in the left-side rows that don't
			  have matches.
			- full outer join: returns all rows from both tables
			  with nulls in rows on either side where matches
			  do not exist.
			- cross join: the Cartesian product of all of the
			  rows from both tables; i.e. all possible combinations
			  of rows from both tables. the result sets of these
			  can obviously get very large, so only use when
			  necessary.
			- self join: joining a table with itself in order to
			  combine related data from the same table. a great
			  example of this is when an EMPLOYEE table has a
			  foreign key referencing that employee's manager
			  who is also an employee and therefore also in the
			  EMPLOYEE table.
		- examples: SELECT * FROM TABLE_A JOIN TABLE_B ON A = B;
		  SELECT * FROM TABLE_A JOIN TABLE_B USING ID;
		  SELECT * FROM TABLE_A LEFT OUTER JOIN TABLE_B ON A = B;
		- the JOIN keyword alone performs an inner join.
		- if we have to use JOINs anyway, what is the point of
		  designating certain fields as foreign keys?
			- a foreign key is a type of constraint, meaning
			  that it restricts certain DML from being executed
			  if the result does not fulfill the constraint. if
			  you try to add a row but the value for the foreign
			  key column does not reference any row in the table
			  that it is referencing, the database will not
			  allow you to perform that insert. if you try to
			  delete a row that is being referenced by a foreign
			  key in another table, it will not let you perform
			  that delete, and so on.